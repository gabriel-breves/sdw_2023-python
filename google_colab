{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## EXTRA√á√ÉO\n"
      ],
      "metadata": {
        "id": "z8GZeuZK0SJY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ci540oFfvcLT",
        "outputId": "5064a8de-6c51-45c8-fbc9-dc227cf6c1a1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4618, 4619, 4620]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "api_url = 'https://sdw-2023-prd.up.railway.app'\n",
        "\n",
        "df = pd.read_csv('user_ids.csv')\n",
        "user_ids = df['UserID'].tolist()\n",
        "print(user_ids)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.core.async_helpers import indent\n",
        "import requests\n",
        "import json\n",
        "\n",
        "def get_user(id):\n",
        "  response = requests.get(f\"{api_url}/users/{id}\")\n",
        "  return response.json() if response.status_code == 200 else None\n",
        "\n",
        "users = [user for id in user_ids if (user := get_user(id))is not None]\n",
        "print(json.dumps(users, indent= 2))"
      ],
      "metadata": {
        "id": "B3asXGc1yAWI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "tx9jtP-E0Pjg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# TRANSFORMA√á√ÉO / ENRIQICER"
      ],
      "metadata": {
        "id": "3Mc3h1y-0Ycn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install openai"
      ],
      "metadata": {
        "id": "vijSGX_60dlX"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "openai_api_key = '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'"
      ],
      "metadata": {
        "id": "wPE0iYWF0jVH"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from openai.api_resources import completion\n",
        "import openai\n",
        "\n",
        "openai.api_key = openai_api_key\n",
        "\n",
        "def generate_ai_news(user):\n",
        "  completion = openai.ChatCompletion.create(\n",
        "      model =\"gpt-3.5-turbo\",\n",
        "      messages=[\n",
        "          {\"role\": \"system\",\n",
        "           \"content\": \"Voc√™ √© um especialista em viagens\"\n",
        "           },\n",
        "\n",
        "\n",
        "          {\"role\": \"user\",\n",
        "           \"content\": f\"Crie uma mensagem para {user['name']} dizendo os melhores lugares para se viajar em 2024 (m√°ximo de 100 caracteres)\"\n",
        "          }\n",
        "      ]\n",
        "  )\n",
        "\n",
        "  return completion.choices[0].message.content.strip('\\\"')\n",
        "\n",
        "for user in users:\n",
        "  news = generate_ai_news(user)\n",
        "  print(news)\n",
        "  user['news'].append({\n",
        "      \"description\": news\n",
        "  })"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AGbBE8ao0wWO",
        "outputId": "933a3d9b-3e1d-48cc-a4d4-be33c29545fc"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024: Paris, Bali, T√≥quio, Banff, Ilhas Maldivas, Amsterd√£, Zanzibar, Sydney, Vancouver, Patag√¥nia. #Divers√£oGarantida\n",
            "2024: Bora! Lugares incr√≠veis a visitar: Ilhas Maldivas, Barcelona, Nova Zel√¢ndia, Amalfi Coast, T√≥quio! #ViagemDosSonhos\n",
            "Paris, Bali, Nova York, Seychelles e T√≥quio! #Destinos2024 üåçüí´\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# CARREGAR RESULTADOS\n",
        "\n"
      ],
      "metadata": {
        "id": "N1Nj2E4I3eaZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def update_user(user):\n",
        "  response = requests.put(f\"{api_url}/users/{user['id']}\", json=user)\n",
        "  return True if response.status_code == 200 else False\n",
        "\n",
        "  for user in users:\n",
        "    sucesso = update_user(user)\n",
        "    print(f\"User{user['name']}\")"
      ],
      "metadata": {
        "id": "keBMhkVi3jA4"
      },
      "execution_count": 36,
      "outputs": []
    }
  ]
}
